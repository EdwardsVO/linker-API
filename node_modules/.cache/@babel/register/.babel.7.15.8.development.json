{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\Edward Vergel\\\\Desktop\\\\kepplerTeam\\\\xd\\\\linker-API\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Edward Vergel\\\\Desktop\\\\kepplerTeam\\\\xd\\\\linker-API\",\"filename\":\"C:\\\\Users\\\\Edward Vergel\\\\Desktop\\\\kepplerTeam\\\\xd\\\\linker-API\\\\src\\\\index.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Edward Vergel\\\\Desktop\\\\kepplerTeam\\\\xd\\\\linker-API\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.15.8": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API",
      "filename": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\index.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "import dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport { ApolloServer } from 'apollo-server-express';\nimport express from 'express';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nschema = require('./graphql/schema.js'); //ENVIRONMENT VARIABLES\n\ndotenv.config({\n  path: './src/variables.env'\n});\nconst PORT = Number(process.env.PORT);\nconst app = express(); //DATABASE CONNECTION\n\nmongoose.connect(String(process.env.DATABASE)).then(() => {\n  console.log(`ðŸ˜ŽðŸ¤© MongoDB running`);\n}).catch(err => {\n  console.log(process.env.DATABASE);\n  console.log(`ERRORðŸ¤¬ðŸ¤¬ ${err}`);\n}); //APOLLO SERVER\n\nconst server = new ApolloServer({\n  schema,\n  introspection: true,\n  tracing: true\n}); //EXPRESS\n\napp.set('port', Number(process.env.PORT) || 3000);\napp.use(compression());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(cookieParser());\napp.listen({\n  port: PORT\n}, () => console.log(`ðŸš€ðŸ›¸Server ready at http://localhost:${PORT}`));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRvdGVudiIsIm1vbmdvb3NlIiwiQXBvbGxvU2VydmVyIiwiZXhwcmVzcyIsImNvbXByZXNzaW9uIiwiYm9keVBhcnNlciIsImNvb2tpZVBhcnNlciIsInNjaGVtYSIsInJlcXVpcmUiLCJjb25maWciLCJwYXRoIiwiUE9SVCIsIk51bWJlciIsInByb2Nlc3MiLCJlbnYiLCJhcHAiLCJjb25uZWN0IiwiU3RyaW5nIiwiREFUQUJBU0UiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyIiwic2VydmVyIiwiaW50cm9zcGVjdGlvbiIsInRyYWNpbmciLCJzZXQiLCJ1c2UiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwibGlzdGVuIiwicG9ydCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsTUFBUCxNQUFtQixRQUFuQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsVUFBckI7QUFDQSxTQUFTQyxZQUFULFFBQTZCLHVCQUE3QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGFBQXhCO0FBQ0EsT0FBT0MsVUFBUCxNQUF1QixhQUF2QjtBQUNBLE9BQU9DLFlBQVAsTUFBeUIsZUFBekI7QUFDQUMsTUFBTSxHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBaEIsQyxDQUVBOztBQUNBUixNQUFNLENBQUNTLE1BQVAsQ0FBYztBQUFFQyxFQUFBQSxJQUFJLEVBQUU7QUFBUixDQUFkO0FBRUEsTUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxJQUFiLENBQW5CO0FBQ0EsTUFBTUksR0FBRyxHQUFHWixPQUFPLEVBQW5CLEMsQ0FJQTs7QUFDQUYsUUFBUSxDQUNKZSxPQURKLENBQ1lDLE1BQU0sQ0FBQ0osT0FBTyxDQUFDQyxHQUFSLENBQVlJLFFBQWIsQ0FEbEIsRUFFS0MsSUFGTCxDQUVVLE1BQUs7QUFDUEMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsc0JBQWI7QUFDSCxDQUpMLEVBSU9DLEtBSlAsQ0FJY0MsR0FBRCxJQUFTO0FBQ2RILEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUixPQUFPLENBQUNDLEdBQVIsQ0FBWUksUUFBeEI7QUFDQUUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsYUFBWUUsR0FBSSxFQUE3QjtBQUNILENBUEwsRSxDQVNBOztBQUVBLE1BQU1DLE1BQU0sR0FBRyxJQUFJdEIsWUFBSixDQUFpQjtBQUM1QkssRUFBQUEsTUFENEI7QUFFOUJrQixFQUFBQSxhQUFhLEVBQUUsSUFGZTtBQUc5QkMsRUFBQUEsT0FBTyxFQUFFO0FBSHFCLENBQWpCLENBQWYsQyxDQU1BOztBQUNBWCxHQUFHLENBQUNZLEdBQUosQ0FBUSxNQUFSLEVBQWdCZixNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxJQUFiLENBQU4sSUFBNEIsSUFBNUM7QUFDQUksR0FBRyxDQUFDYSxHQUFKLENBQVF4QixXQUFXLEVBQW5CO0FBQ0FXLEdBQUcsQ0FBQ2EsR0FBSixDQUFRdkIsVUFBVSxDQUFDd0IsSUFBWCxFQUFSO0FBQ0FkLEdBQUcsQ0FBQ2EsR0FBSixDQUFRdkIsVUFBVSxDQUFDeUIsVUFBWCxDQUFzQjtBQUFFQyxFQUFBQSxRQUFRLEVBQUU7QUFBWixDQUF0QixDQUFSO0FBQ0FoQixHQUFHLENBQUNhLEdBQUosQ0FBUXRCLFlBQVksRUFBcEI7QUFDQVMsR0FBRyxDQUFDaUIsTUFBSixDQUFXO0FBQUVDLEVBQUFBLElBQUksRUFBRXRCO0FBQVIsQ0FBWCxFQUEyQixNQUN2QlMsT0FBTyxDQUFDQyxHQUFSLENBQWEsd0NBQXVDVixJQUFLLEVBQXpELENBREoiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxFZHdhcmQgVmVyZ2VsXFxEZXNrdG9wXFxrZXBwbGVyVGVhbVxceGRcXGxpbmtlci1BUElcXHNyY1xcIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5pbXBvcnQgeyBBcG9sbG9TZXJ2ZXIgfSBmcm9tICdhcG9sbG8tc2VydmVyLWV4cHJlc3MnO1xyXG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IGNvbXByZXNzaW9uIGZyb20gJ2NvbXByZXNzaW9uJztcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xyXG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInO1xyXG5zY2hlbWEgPSByZXF1aXJlKCcuL2dyYXBocWwvc2NoZW1hLmpzJyk7XHJcblxyXG4vL0VOVklST05NRU5UIFZBUklBQkxFU1xyXG5kb3RlbnYuY29uZmlnKHsgcGF0aDogJy4vc3JjL3ZhcmlhYmxlcy5lbnYnIH0pXHJcblxyXG5jb25zdCBQT1JUID0gTnVtYmVyKHByb2Nlc3MuZW52LlBPUlQpO1xyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcblxyXG5cclxuXHJcbi8vREFUQUJBU0UgQ09OTkVDVElPTlxyXG5tb25nb29zZS5cclxuICAgIGNvbm5lY3QoU3RyaW5nKHByb2Nlc3MuZW52LkRBVEFCQVNFKSlcclxuICAgIC50aGVuKCgpPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5iO8J+kqSBNb25nb0RCIHJ1bm5pbmdgKVxyXG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHByb2Nlc3MuZW52LkRBVEFCQVNFKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgRVJST1Lwn6Ss8J+krCAke2Vycn1gKVxyXG4gICAgfSk7XHJcblxyXG4vL0FQT0xMTyBTRVJWRVJcclxuXHJcbmNvbnN0IHNlcnZlciA9IG5ldyBBcG9sbG9TZXJ2ZXIoe1xyXG4gICAgc2NoZW1hLFxyXG4gIGludHJvc3BlY3Rpb246IHRydWUsXHJcbiAgdHJhY2luZzogdHJ1ZSxcclxufSk7XHJcblxyXG4vL0VYUFJFU1NcclxuYXBwLnNldCgncG9ydCcsIE51bWJlcihwcm9jZXNzLmVudi5QT1JUKSB8fCAzMDAwKTtcclxuYXBwLnVzZShjb21wcmVzc2lvbigpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xyXG5hcHAudXNlKGNvb2tpZVBhcnNlcigpKTtcclxuYXBwLmxpc3Rlbih7IHBvcnQ6IFBPUlQgfSwgKCkgPT4gXHJcbiAgICBjb25zb2xlLmxvZyhg8J+agPCfm7hTZXJ2ZXIgcmVhZHkgYXQgaHR0cDovL2xvY2FsaG9zdDoke1BPUlR9YClcclxuICAgIClcclxuXHJcblxyXG5cclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "dotenv",
        "mongoose",
        "ApolloServer",
        "express",
        "compression",
        "bodyParser",
        "cookieParser",
        "schema",
        "require",
        "config",
        "path",
        "PORT",
        "Number",
        "process",
        "env",
        "app",
        "connect",
        "String",
        "DATABASE",
        "then",
        "console",
        "log",
        "catch",
        "err",
        "server",
        "introspection",
        "tracing",
        "set",
        "use",
        "json",
        "urlencoded",
        "extended",
        "listen",
        "port"
      ],
      "mappings": "AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACAC,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAAhB,C,CAEA;;AACAR,MAAM,CAACS,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAd;AAEA,MAAMC,IAAI,GAAGC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYH,IAAb,CAAnB;AACA,MAAMI,GAAG,GAAGZ,OAAO,EAAnB,C,CAIA;;AACAF,QAAQ,CACJe,OADJ,CACYC,MAAM,CAACJ,OAAO,CAACC,GAAR,CAAYI,QAAb,CADlB,EAEKC,IAFL,CAEU,MAAK;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACH,CAJL,EAIOC,KAJP,CAIcC,GAAD,IAAS;AACdH,EAAAA,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACC,GAAR,CAAYI,QAAxB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAa,aAAYE,GAAI,EAA7B;AACH,CAPL,E,CASA;;AAEA,MAAMC,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC5BK,EAAAA,MAD4B;AAE9BkB,EAAAA,aAAa,EAAE,IAFe;AAG9BC,EAAAA,OAAO,EAAE;AAHqB,CAAjB,CAAf,C,CAMA;;AACAX,GAAG,CAACY,GAAJ,CAAQ,MAAR,EAAgBf,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYH,IAAb,CAAN,IAA4B,IAA5C;AACAI,GAAG,CAACa,GAAJ,CAAQxB,WAAW,EAAnB;AACAW,GAAG,CAACa,GAAJ,CAAQvB,UAAU,CAACwB,IAAX,EAAR;AACAd,GAAG,CAACa,GAAJ,CAAQvB,UAAU,CAACyB,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAhB,GAAG,CAACa,GAAJ,CAAQtB,YAAY,EAApB;AACAS,GAAG,CAACiB,MAAJ,CAAW;AAAEC,EAAAA,IAAI,EAAEtB;AAAR,CAAX,EAA2B,MACvBS,OAAO,CAACC,GAAR,CAAa,wCAAuCV,IAAK,EAAzD,CADJ",
      "sourceRoot": "C:\\Users\\Edward Vergel\\Desktop\\kepplerTeam\\xd\\linker-API\\src\\",
      "sourcesContent": [
        "import dotenv from 'dotenv';\r\nimport mongoose from 'mongoose';\r\nimport { ApolloServer } from 'apollo-server-express';\r\nimport express from 'express';\r\nimport compression from 'compression';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nschema = require('./graphql/schema.js');\r\n\r\n//ENVIRONMENT VARIABLES\r\ndotenv.config({ path: './src/variables.env' })\r\n\r\nconst PORT = Number(process.env.PORT);\r\nconst app = express();\r\n\r\n\r\n\r\n//DATABASE CONNECTION\r\nmongoose.\r\n    connect(String(process.env.DATABASE))\r\n    .then(()=> {\r\n        console.log(`ðŸ˜ŽðŸ¤© MongoDB running`)\r\n    }).catch((err) => {\r\n        console.log(process.env.DATABASE);\r\n        console.log(`ERRORðŸ¤¬ðŸ¤¬ ${err}`)\r\n    });\r\n\r\n//APOLLO SERVER\r\n\r\nconst server = new ApolloServer({\r\n    schema,\r\n  introspection: true,\r\n  tracing: true,\r\n});\r\n\r\n//EXPRESS\r\napp.set('port', Number(process.env.PORT) || 3000);\r\napp.use(compression());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(cookieParser());\r\napp.listen({ port: PORT }, () => \r\n    console.log(`ðŸš€ðŸ›¸Server ready at http://localhost:${PORT}`)\r\n    )\r\n\r\n\r\n\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1633907226759
  }
}